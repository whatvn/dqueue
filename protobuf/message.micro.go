// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: message.proto

/*
Package delayQueue is a generated protocol buffer package.

It is generated from these files:
	message.proto
	service.proto

It has these top-level messages:
	MessageReq
	MessageData
	ReturnCommon
	QueryListMessagesResp
	QueueRequest
	QueueResponse
*/
package delayQueue

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Message service

type MessageService interface {
	GetAllMessages(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*QueryListMessagesResp, error)
	ForceMessage(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*ReturnCommon, error)
	GetListMessage(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*QueryListMessagesResp, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "delayQueue"
	}
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) GetAllMessages(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*QueryListMessagesResp, error) {
	req := c.c.NewRequest(c.name, "Message.GetAllMessages", in)
	out := new(QueryListMessagesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) ForceMessage(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*ReturnCommon, error) {
	req := c.c.NewRequest(c.name, "Message.ForceMessage", in)
	out := new(ReturnCommon)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) GetListMessage(ctx context.Context, in *MessageReq, opts ...client.CallOption) (*QueryListMessagesResp, error) {
	req := c.c.NewRequest(c.name, "Message.GetListMessage", in)
	out := new(QueryListMessagesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageHandler interface {
	GetAllMessages(context.Context, *MessageReq, *QueryListMessagesResp) error
	ForceMessage(context.Context, *MessageReq, *ReturnCommon) error
	GetListMessage(context.Context, *MessageReq, *QueryListMessagesResp) error
}

func RegisterMessageHandler(s server.Server, hdlr MessageHandler, opts ...server.HandlerOption) error {
	type message interface {
		GetAllMessages(ctx context.Context, in *MessageReq, out *QueryListMessagesResp) error
		ForceMessage(ctx context.Context, in *MessageReq, out *ReturnCommon) error
		GetListMessage(ctx context.Context, in *MessageReq, out *QueryListMessagesResp) error
	}
	type Message struct {
		message
	}
	h := &messageHandler{hdlr}
	return s.Handle(s.NewHandler(&Message{h}, opts...))
}

type messageHandler struct {
	MessageHandler
}

func (h *messageHandler) GetAllMessages(ctx context.Context, in *MessageReq, out *QueryListMessagesResp) error {
	return h.MessageHandler.GetAllMessages(ctx, in, out)
}

func (h *messageHandler) ForceMessage(ctx context.Context, in *MessageReq, out *ReturnCommon) error {
	return h.MessageHandler.ForceMessage(ctx, in, out)
}

func (h *messageHandler) GetListMessage(ctx context.Context, in *MessageReq, out *QueryListMessagesResp) error {
	return h.MessageHandler.GetListMessage(ctx, in, out)
}
